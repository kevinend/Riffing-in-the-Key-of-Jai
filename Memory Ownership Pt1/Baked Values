// baking a value or a type is a way to partially specialize a function at COMPILE time
// there are two types of baking: type baking (#bake) and value baking (#bake_values)

// Here are a few simple examples to illustrate the idea:
adder :: (x: int, y: int) -> int {
  return x + y;
}

add3 :: #bake_values adder( y = 3 ); 
add4 :: #bake_values adder( y = 4 );
add5 :: #bake_values adder( y = 5 );

// all the above functions are partially specialized to now be single argument functions that can be called anywhere within the program

print( "% % %", add3(0), add4(1), add5(2) ); //  output: 3,5,7

// baking values is not simply a convenience, it allows the compiler to eliminate branches within code where values are known at compile 
// time. It ultimately allows you to write very general code and NOT pay for the generality (at least in terms of speed). There could be
// multiple instances of a baked function generated however.

// the syntax $$ in a function definition is currently (subject to change) the way to tell the compiler to bake a value and generate a new 
// function from the old one

some_function :: (x: int, $$ limit: int) -> int {

    if limit == 10 {
        return x + limit;
    }
    else {
        return x - limit;
    }
}

// normally, any call to this function would have to test and branch based on the value of limit
// so in languages like C and Rust the following three calls all perform the exact same operations:
int upper_limit = 10;
some_function( 5, 10 );
some_function( 5, upper_limit );
some_function( 5, 3 );

// with the baking syntax above ($$), if the value passed to y is a compile time constant the compiler will generate a new function
// without the branching and call that, improving runtime performance as well as reducing pressure on the instruction cache. 
// So these calls in Jai would only branch in the case of using a variable such as 'upper_limit'





